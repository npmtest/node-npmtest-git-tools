{"/home/travis/build/npmtest/node-npmtest-git-tools/test.js":"/* istanbul instrument in package npmtest_git_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-tools/lib.npmtest_git_tools.js":"/* istanbul instrument in package npmtest_git_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_git_tools = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_git_tools = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-git-tools/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-git-tools && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_git_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_git_tools\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_git_tools.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_git_tools.rollup.js'] =\n            local.assetsDict['/assets.npmtest_git_tools.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_git_tools.__dirname + '/lib.npmtest_git_tools.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-tools/node_modules/git-tools/git-tools.js":"var spawn = require( \"spawnback\" );\n\nfunction extend( a, b ) {\n\tfor ( var prop in b ) {\n\t\ta[ prop ] = b[ prop ];\n\t}\n\n\treturn a;\n}\n\nfunction copy( obj ) {\n\treturn extend( {}, obj );\n}\n\nfunction Repo( path ) {\n\tthis.path = path;\n}\n\nRepo.parsePerson = (function() {\n\tvar rPerson = /^(\\S+)\\s(.+)$/;\n\treturn function( person ) {\n\t\tvar matches = rPerson.exec( person );\n\t\treturn {\n\t\t\temail: matches[ 1 ],\n\t\t\tname: matches[ 2 ]\n\t\t};\n\t};\n})();\n\nRepo.clone = function( options, callback ) {\n\tvar dir = options.dir;\n\tvar args = [ \"clone\", options.repo, dir ];\n\toptions = copy( options );\n\tdelete options.repo;\n\tdelete options.dir;\n\n\tObject.keys( options ).forEach(function( option ) {\n\t\targs.push( \"--\" + option );\n\n\t\tvar value = options[ option ];\n\t\tif ( value !== true ) {\n\t\t\targs.push( value );\n\t\t}\n\t});\n\n\targs.push(function( error ) {\n\t\tif ( error ) {\n\t\t\treturn callback( error );\n\t\t}\n\n\t\tcallback( null, new Repo( dir ) );\n\t});\n\n\tvar repo = new Repo( process.cwd() );\n\trepo.exec.apply( repo, args );\n};\n\nRepo.isRepo = function( path, callback ) {\n\tvar repo = new Repo( path );\n\trepo.isRepo( callback );\n};\n\nRepo.prototype.exec = function() {\n\tvar args = [].slice.call( arguments );\n\tvar callback = args.pop();\n\tspawn( \"git\", args, { cwd: this.path }, function( error, stdout ) {\n\t\tif ( error ) {\n\t\t\treturn callback( error );\n\t\t}\n\n\t\t// Remove trailing newline\n\t\tstdout = stdout.replace( /\\n$/, \"\" );\n\n\t\tcallback( null, stdout );\n\t});\n};\n\nRepo.prototype.activeDays = function( committish, callback ) {\n\tif ( !callback ) {\n\t\tcallback = committish;\n\t\tcommittish = \"master\";\n\t}\n\n\tthis.exec( \"log\", \"--format=%at\", committish, function( error, dates ) {\n\t\tif ( error ) {\n\t\t\treturn callback( error );\n\t\t}\n\n\t\tvar dateMap = {\n\t\t\tactiveDays: 0,\n\t\t\tcommits: 0,\n\t\t\tdates: {},\n\t\t\tyears: {}\n\t\t};\n\n\t\tdates.split( \"\\n\" ).sort().forEach(function( timestamp ) {\n\t\t\tvar date = new Date( timestamp * 1000 );\n\t\t\tvar year = date.getFullYear();\n\t\t\tvar month = date.getMonth() + 1;\n\t\t\tvar day = date.getDate();\n\n\t\t\tdate = year + \"-\" +\n\t\t\t\t(month < 10 ? \"0\" : \"\") + month + \"-\" +\n\t\t\t\t(day < 10 ? \"0\" : \"\") + day;\n\n\t\t\tif ( !dateMap.dates[ date ] ) {\n\t\t\t\tdateMap.dates[ date ] = 0;\n\t\t\t}\n\t\t\tdateMap.commits++;\n\t\t\tdateMap.dates[ date ]++;\n\n\t\t\tif ( !dateMap.years[ year ] ) {\n\t\t\t\tdateMap.years[ year ] = {\n\t\t\t\t\tactiveDays: 0,\n\t\t\t\t\tcommits: 0,\n\t\t\t\t\tmonths: {}\n\t\t\t\t};\n\t\t\t}\n\t\t\tdateMap.years[ year ].commits++;\n\n\t\t\tif ( !dateMap.years[ year ].months[ month ] ) {\n\t\t\t\tdateMap.years[ year ].months[ month ] = {\n\t\t\t\t\tactiveDays: 0,\n\t\t\t\t\tcommits: 0,\n\t\t\t\t\tdays: {}\n\t\t\t\t};\n\t\t\t}\n\t\t\tdateMap.years[ year ].months[ month ].commits++;\n\n\t\t\tif ( !dateMap.years[ year ].months[ month ].days[ day ] ) {\n\t\t\t\tdateMap.years[ year ].months[ month ].days[ day ] = {\n\t\t\t\t\tcommits: 0\n\t\t\t\t};\n\t\t\t\tdateMap.activeDays++;\n\t\t\t\tdateMap.years[ year ].activeDays++;\n\t\t\t\tdateMap.years[ year ].months[ month ].activeDays++;\n\t\t\t}\n\t\t\tdateMap.years[ year ].months[ month ].days[ day ].commits++;\n\t\t});\n\n\t\tcallback( null, dateMap );\n\t});\n};\n\nRepo.prototype.age = function( callback ) {\n\tthis.exec( \"log\", \"--reverse\", \"--format=%cr\", function( error, stdout ) {\n\t\tif ( error ) {\n\t\t\treturn callback( error );\n\t\t}\n\n\t\tcallback( null, stdout.split( \"\\n\" )[ 0 ].replace( /\\sago/, \"\" ) );\n\t});\n};\n\nRepo.prototype.authors = function( committish, callback ) {\n\tif ( !callback ) {\n\t\tcallback = committish;\n\t\tcommittish = \"master\";\n\t}\n\n\tthis.exec( \"log\", \"--format=%aE %aN\", committish, function( error, data ) {\n\t\tif ( error ) {\n\t\t\treturn callback( error );\n\t\t}\n\n\t\t// Logs on a boundary commit will have no output\n\t\tvar authors = data.length ? data.split( \"\\n\" ) : [];\n\t\tvar authorMap = {};\n\t\tvar totalCommits = 0;\n\n\t\tauthors.forEach(function( author ) {\n\t\t\tif ( !authorMap[ author ] ) {\n\t\t\t\tauthorMap[ author ] = 0;\n\t\t\t}\n\n\t\t\tauthorMap[ author ]++;\n\t\t\ttotalCommits++;\n\t\t});\n\n\t\tauthors = Object.keys( authorMap ).map(function( author ) {\n\t\t\tvar commits = authorMap[ author ];\n\t\t\treturn extend( Repo.parsePerson( author ), {\n\t\t\t\tcommits: commits,\n\t\t\t\tcommitsPercent: (commits * 100 / totalCommits).toFixed( 1 )\n\t\t\t});\n\t\t}).sort(function( a, b ) {\n\t\t\treturn b.commits - a.commits;\n\t\t});\n\n\t\tcallback( null, authors );\n\t});\n};\n\nRepo.prototype.blame = function( options, callback ) {\n\tvar args = [ \"blame\", \"-s\" ];\n\n\tif ( options.committish ) {\n\t\targs.push( options.committish );\n\t}\n\n\targs.push( \"--\", options.path );\n\n\tvar rBlame = /^(\\^?\\w+)(\\s(\\S+))?\\s+(\\d+)\\)\\s(.*)$/;\n\n\targs.push(function( error, blame ) {\n\t\tif ( error ) {\n\t\t\treturn callback( error );\n\t\t}\n\n\t\tvar lines = blame.split( /\\r?\\n/ );\n\t\tlines = lines.map(function( line ) {\n\t\t\tvar matches = rBlame.exec( line );\n\t\t\tvar commit = matches[ 1 ];\n\t\t\tvar boundary = /^\\^/.test( commit );\n\n\t\t\tif ( boundary ) {\n\t\t\t\tcommit = commit.substring( 1 );\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tcommit: matches[ 1 ],\n\t\t\t\tboundary: boundary,\n\t\t\t\tpath: matches[ 3 ] || options.path,\n\t\t\t\tlineNumber: parseInt( matches[ 4 ], 10 ),\n\t\t\t\tcontent: matches[ 5 ]\n\t\t\t};\n\t\t});\n\n\t\tcallback( null, lines );\n\t});\n\n\tthis.exec.apply( this, args );\n};\n\nRepo.prototype.branches = function( callback ) {\n\tthis.exec( \"for-each-ref\",\n\t\t\"--format=\" +\n\t\t\t\"%(refname:short)%0a\" +\n\t\t\t\"%(authordate:rfc2822)%0a\" +\n\t\t\t\"%(authoremail) %(authorname)%0a\" +\n\t\t\t\"%(subject)%0a\" +\n\t\t\t\"%(objectname)%0a\",\n\t\t\"refs/heads\",\n\tfunction( error, data ) {\n\t\tif ( error ) {\n\t\t\treturn callback( error );\n\t\t}\n\n\t\tvar branches = data.split( \"\\n\\n\" ).map(function( branch ) {\n\t\t\tvar lines = branch.split( \"\\n\" );\n\t\t\tvar name = lines[ 0 ];\n\t\t\tvar date = new Date( lines[ 1 ] );\n\t\t\tvar author = Repo.parsePerson( lines[ 2 ] );\n\t\t\tvar subject = lines[ 3 ];\n\t\t\tvar sha = lines[ 4 ];\n\n\t\t\treturn {\n\t\t\t\tname: name,\n\t\t\t\tsha: sha,\n\t\t\t\tdate: date,\n\t\t\t\tsubject: subject,\n\t\t\t\tauthor: author\n\t\t\t};\n\t\t}).sort(function( a, b ) {\n\t\t\treturn b.date - a.date;\n\t\t});\n\n\t\tcallback( null, branches );\n\t});\n};\n\nRepo.prototype.config = function( name, callback ) {\n\tthis.exec( \"config\", \"--get\", name, function( error, stdout ) {\n\t\tif ( error ) {\n\t\t\tif ( /^Command failed:\\s+$/.test( error.message ) ) {\n\t\t\t\treturn callback( null, null );\n\t\t\t}\n\n\t\t\treturn callback( error );\n\t\t}\n\n\t\tcallback( null, stdout.trim() );\n\t});\n};\n\nRepo.prototype.currentBranch = function( callback ) {\n\tthis.exec( \"rev-parse\", \"--abbrev-ref\", \"HEAD\", function( error, data ) {\n\t\tif ( error ) {\n\t\t\treturn callback( error );\n\t\t}\n\n\t\tvar branch = data === \"HEAD\" ? null : data;\n\t\tcallback( null, branch );\n\t});\n};\n\nRepo.prototype.isRepo = function( callback ) {\n\tthis.exec( \"rev-parse\", \"--git-dir\", function( error ) {\n\t\tif ( error ) {\n\t\t\tif ( error.message.indexOf( \"Not a git repository\" ) ) {\n\t\t\t\treturn callback( null, false );\n\t\t\t}\n\n\t\t\t// If the path doesn't exist, don't return an error\n\t\t\tif ( error.code === \"ENOENT\" ) {\n\t\t\t\treturn callback( null, false );\n\t\t\t}\n\n\t\t\treturn callback( error );\n\t\t}\n\n\t\tcallback( null, true );\n\t});\n};\n\nRepo.prototype.remotes = function( callback ) {\n\tthis.exec( \"remote\", \"-v\", function( error, data ) {\n\t\tif ( error ) {\n\t\t\treturn callback( error );\n\t\t}\n\n\t\tvar remotes = data.split( \"\\n\" );\n\t\tvar rRemote = /^(\\S+)\\s(\\S+)/;\n\t\tvar remoteMap = {};\n\n\t\tremotes.forEach(function( remote ) {\n\t\t\tvar matches = rRemote.exec( remote );\n\n\t\t\t// New repositories with no remotes will have `origin` but no URL\n\t\t\tif ( !matches ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar name = matches[ 1 ];\n\t\t\tvar url = matches[ 2 ];\n\n\t\t\tremoteMap[ name ] = url;\n\t\t});\n\n\t\tremotes = Object.keys( remoteMap ).map(function( remote ) {\n\t\t\treturn {\n\t\t\t\tname: remote,\n\t\t\t\turl: remoteMap[ remote ]\n\t\t\t};\n\t\t});\n\n\t\tcallback( null, remotes );\n\t});\n};\n\nRepo.prototype.resolveCommittish = function( committish, callback ) {\n\tthis.exec( \"rev-parse\", committish, callback );\n};\n\nRepo.prototype.tags = function( callback ) {\n\tthis.exec( \"for-each-ref\",\n\t\t\"--format=\" +\n\t\t\t\"%(refname:short)%0a\" +\n\t\t\t\"%(authordate)%(taggerdate)%0a\" +\n\t\t\t\"%(objectname)%0a\",\n\t\t\"refs/tags\",\n\tfunction( error, data ) {\n\t\tif ( error ) {\n\t\t\treturn callback( error );\n\t\t}\n\n\t\tif ( !data ) {\n\t\t\treturn callback( null, [] );\n\t\t}\n\n\t\tvar tags = data.split( \"\\n\\n\" ).map(function( tag ) {\n\t\t\tvar lines = tag.split( \"\\n\" );\n\t\t\tvar name = lines[ 0 ];\n\t\t\tvar date = new Date( lines[ 1 ] );\n\t\t\tvar sha = lines[ 2 ];\n\n\t\t\treturn {\n\t\t\t\tname: name,\n\t\t\t\tsha: sha,\n\t\t\t\tdate: date\n\t\t\t};\n\t\t}).sort(function( a, b ) {\n\t\t\treturn b.date - a.date;\n\t\t});\n\n\t\tcallback( null, tags );\n\t});\n};\n\nmodule.exports = Repo;\n"}